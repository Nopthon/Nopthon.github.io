<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Nopthon's trashcan</title><link>https://Nopthon.github.io</link><description>一个存放各种各样不知道是什么内容的Trashcan🚮</description><copyright>Nopthon's trashcan</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://nopthon.github.io/burger.svg</url><title>avatar</title><link>https://Nopthon.github.io</link></image><lastBuildDate>Fri, 17 Oct 2025 08:41:32 +0000</lastBuildDate><managingEditor>Nopthon's trashcan</managingEditor><ttl>60</ttl><webMaster>Nopthon's trashcan</webMaster><item><title>子站点导航</title><link>https://Nopthon.github.io/post/zi-zhan-dian-dao-hang.html</link><description>icspa.nopthon.icu 记录了完成 icspa 的 note
code.nopthon.icu 是刷题仓库的前端显示
csnote.nopthon.icu 是一个使用 mkdocs-material 的笔记页
嗯目前就这些

&lt;!-- ##{'timestamp':4070925296}## --&gt;。</description><guid isPermaLink="true">https://Nopthon.github.io/post/zi-zhan-dian-dao-hang.html</guid><pubDate>Thu, 01 Jan 2099 04:34:56 +0000</pubDate></item><item><title>TrinityCTF 2025 Writeup</title><link>https://Nopthon.github.io/post/TrinityCTF%202025%20Writeup.html</link><description>一个零 CTF 经验的大二老登参加了校内的面向新生的 CTF 比赛，

这是他的 Writeup 发生的变化：

~~AI 还是太好用了~~ ~~AI 写的都啥代码~~ 我错了

---

### Misc01-CTF_101

&gt; 欢迎参赛TrinityCTF!
&gt;
&gt; 作为一名参赛选手你首先需要看看靶场, 看看公告, 确保了解比赛规则详情!
&gt;
&gt; 善用互联网和工具, 希望你能在这场比赛中学习, 练习; 或是切身感受下CTF赛事的氛围与挑战
&gt;
&gt; 如果你发现你不会的还挺多, ~~那就对了~~ 我们每一名队员都是这么成长起来的, 赛后我们也会组织WP讲解, 欢迎来听 如果你发现你都会, 啊那太好了. 请在这场比赛尽情杀题~~然后大佬带飞我们战队把😆~~
&gt;
&gt; 最后祝各位解题顺利.

然后就要填 Flag 了，注意到在几天前发布的 TrinityCTF 2025 coming 赛事预告中有：

&gt; 最后祝大家参赛愉快~~ZmxhZ3toNHBweV9oNGNrMW41IX0=~~取得好成绩

Base64 一下被划线的乱码得到 `flag{h4ppy_h4ck1n5!}`



### Misc02-搜打撤

提供了一个 py 文件和摩斯电码本，py 文件运行后是一个文字冒险游戏，在游玩过程中可以获得flag碎片，实际上可以直接翻 py 文件：

```python
WORK_SECRET = os.getenv('WORK_SECRET', 'dzBySw==')					# Base64: w0rK
COMBINE_SECRET = os.getenv('COMBINE_SECRET', 'YzBtYkluZSBhbDE=')	# Base64: c0mbIne al1
PASSWORD1 = os.getenv('PASSWORD1', 'TkpVZXI=')						# Base64: NJUer
PASSWORD2 = os.getenv('PASSWORD2', 'UEtVZXI=')						# Base64: PKUer
FLAG_SECRET = os.getenv('FLAG_SECRET', 'ZmxhZw==')					# Base64: flag
# 省略一部分内容...
def exit_gate():
    '''校门撤离点'''
    print('祝贺你得到了想要的东西。</description><guid isPermaLink="true">https://Nopthon.github.io/post/TrinityCTF%202025%20Writeup.html</guid><pubDate>Mon, 06 Oct 2025 15:59:26 +0000</pubDate></item><item><title>CSAPP Bomblab Solution</title><link>https://Nopthon.github.io/post/CSAPP%20Bomblab%20Solution.html</link><description># Lab 2: Bomb Lab

二进制炸弹 `Bomb` 是一个由多个阶段组成的程序，每个阶段会要求用户在 `stdin` 输入特定字符串。</description><guid isPermaLink="true">https://Nopthon.github.io/post/CSAPP%20Bomblab%20Solution.html</guid><pubDate>Fri, 22 Aug 2025 06:33:04 +0000</pubDate></item><item><title>CSAPP Datalab Solution</title><link>https://Nopthon.github.io/post/CSAPP%20Datalab%20Solution.html</link><description># Lab 1: Data Lab

使用 C 语言，在限定条件下，在 `bits.c` 文件中实现下列函数：

（每一题的具体要求可以参考 `bits.c` 注释内容）

| Func Name               | Description                                     | Max Ops Allowed |
| ----------------------- | ----------------------------------------------- | --------------- |
| **bitXor(x,y)**         | 仅用 `&amp;` 和 `~` 实现 `x xor y`                  | 14              |
| **tmin()**              | 返回最小的二进制补码整数                        | 4               |
| **isTmax(x)**           | 判断 `x` 是否为最大的二进制补码整数             | 10              |
| **allOddBits(x)**       | 判断 `x` 的所有奇数位是否均为 1                 | 12              |
| **negate(x)**           | 不使用 `-` 运算符返回 `-x`                      | 5               |
| **isAsciiDigit(x)**     | 判断 `x` 是否为 ASCII 数字（`0x30 ≤ x ≤ 0x39`） | 15              |
| **conditional(x,y,z)**  | 实现 `x ? y : z` 的功能                         | 16              |
| **isLessOrEqual(x, y)** | 判断 `x` 是否小于等于 `y`                       | 24              |
| **logicalNeg(x)**       | 不使用 `!` 运算符实现 `!x`                      | 12              |
| **howManyBits(x)**      | 返回表示 `x` 所需的最小位数                     | 90              |
| **floatScale2(uf)**     | 返回与表达式 `2 * f` 等价的二进制位表示         | 30              |
| **floatFloat2Int(uf)**  | 将浮点数转换为整数                              | 30              |
| **floatPower2(x)**      | 返回与表达式 `2.0 ^ x` 等价的二进制位表示       | 30              |
&lt;br&gt;

---

## Solution

1. ### 仅用 `&amp;` 和 `~` 实现 `x ^ y` 

​	对 xor 式子进行变换，第一步拆开 xor 表达式为和或非形式，第二步使用德摩根律消去 `|` 运算

​	`x ^ y = ~( (~ (~x &amp; y)) &amp; (~ (x &amp; ~y)) )`

​	code: 

```C
int bitXor(int x, int y) {
	return ~( (~ (~x &amp; y)) &amp; (~ (x &amp; ~y)) );
}
```

&lt;br&gt;

2. ### 返回最小的二进制补码整数

​	要求中提到：整数常量只能设置在 0 到 255（ `0xff` ），不允许使用更大的常量（如 `0xffffffff`）

​	我们知道最小的二进制补码整数是 `10000000 00000000 00000000 00000000` （题设使用 32 位二进制补码表示整数），可以选择将 `10000000` 左移 24 位实现

​	code: 

```C
int tmin(void) {
	return 0x80 &lt;&lt; 24;
}
```

&lt;br&gt;

3. ### 判断 `x` 是否为最大的二进制补码整数

​	不能使用控制函数，所以不能 `if` 

​	我们知道最大的二进制补码整数是 `01111111 11111111 11111111 11111111` ，这个数有一个特性： `+1` 操作与取反操作得到相同的值。</description><guid isPermaLink="true">https://Nopthon.github.io/post/CSAPP%20Datalab%20Solution.html</guid><pubDate>Sat, 19 Jul 2025 15:44:21 +0000</pubDate></item><item><title>Logisim Helper for DL&amp;CO</title><link>https://Nopthon.github.io/post/Logisim%20Helper%20for%20DL%26CO.html</link><description>&gt;[!NOTE]
&gt; 这篇文章可能对正在学习**数字逻辑与计算机组成**（Digital Logic and Computer Organization, **DL&amp;CO**或相关课程的学生有一定帮助。</description><guid isPermaLink="true">https://Nopthon.github.io/post/Logisim%20Helper%20for%20DL%26CO.html</guid><pubDate>Fri, 20 Jun 2025 16:20:07 +0000</pubDate></item><item><title>[Test] [NOIP 1999 提高组] 导弹拦截 题解</title><link>https://Nopthon.github.io/post/%5BTest%5D%20%5BNOIP%201999%20-ti-gao-zu-%5D%20-dao-dan-lan-jie-%20-ti-jie.html</link><description>&gt; [!IMPORTANT]
&gt; *【这篇题解放在这里是用来测试Gmeek整体渲染效果的，题解内容是半年前随便写的，正确性、严谨性、规范性没有保证，仅供参考（？）】*

### 题目大意：对于一个数列，求出其最长不上升子数列的长度，以及至少能用几个最长不上升子序列覆盖整个数列。</description><guid isPermaLink="true">https://Nopthon.github.io/post/%5BTest%5D%20%5BNOIP%201999%20-ti-gao-zu-%5D%20-dao-dan-lan-jie-%20-ti-jie.html</guid><pubDate>Thu, 29 May 2025 11:49:23 +0000</pubDate></item></channel></rss>